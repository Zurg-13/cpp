// INCLUDE. --------------------------------------------------------------------
//------------------------------------------------------------------------------
#include <functional>

#include "env.h" // Глобальная среда приложения.
#include "std.h"
#include "dbg.h"
#include "xml.h"

#include "MDoer.h"

// Макросы. --------------------------------------------------------------------
//------------------------------------------------------------------------------
#define ERR(m) E::err("DOER " % STR(SYSDATE) % ": " % m)
#define IMP(m) E::imp("DOER " % STR(SYSDATE) % ": " % m)
#define OTH(m) E::oth("DOER " % STR(SYSDATE) % ": " % m)


/* MDoer. *********************************************************************/
/******************************************************************************/

// Обработчик запроса. ---------------------------------------------------------
//------------------------------------------------------------------------------
void MDoer::wrk(Command cmnd) {
    if(NOT(this->ready)) { return; }

    // Маршрутизация.
    switch(this->cmd[cmnd.action]) {

     // version
     case 1: SEND(Result(cmnd, DONE, "version",
        {{"version", qApp->applicationVersion()}} ));
        break;

     // todo: Реализовать отдачу логов.
     // get_log
     case 2:
        break;

    }// switch(this->cmd[cmd].toInt())

}// wrk

// Конструктор. ----------------------------------------------------------------
//------------------------------------------------------------------------------
MDoer::MDoer(const QString &conf, QObject *prnt) : QObject(prnt), Module() {
    init(conf);
}// MDoer

// Деструктор. -----------------------------------------------------------------
//------------------------------------------------------------------------------
MDoer::~MDoer() {
    this->close();
    FNC << "end";
}// ~MDoer

// Задать конфигурацию. --------------------------------------------------------
//------------------------------------------------------------------------------
void MDoer::init(const QString &conf) { if(E::Main) { E::Main->init(conf); }}

// Открыть устройство. ---------------------------------------------------------
//------------------------------------------------------------------------------
bool MDoer::open(void) {
    return false; // заглушка
}// open

// Закрыть устройство. ---------------------------------------------------------
//------------------------------------------------------------------------------
void MDoer::close(void) {
    this->ready = false;
}// close

// Вернуть версию. -------------------------------------------------------------
//------------------------------------------------------------------------------
void MDoer::version(const Command &cmnd) {

}// version

// Вернуть логи. ---------------------------------------------------------------
//------------------------------------------------------------------------------
void MDoer::get_log(const Command &cmnd) {

}// get_log

//------------------------------------------------------------------------------


