// INCLUDE. --------------------------------------------------------------------
//------------------------------------------------------------------------------
#include "std.h"

// Сращивание через разлелитель. -----------------------------------------------
//------------------------------------------------------------------------------
QString FSN(QString lft, QString rgt, QString sep) {

    int idx_l = lft.size()-1;
    while(idx_l >= 0 && QString(lft[idx_l]) == sep) idx_l--;

    int idx_r = 0, sze_r = rgt.size();
    while(idx_r < sze_r && QString(rgt[idx_r]) == sep) idx_r++;

    return lft.mid(0, idx_l+1) + sep + rgt.mid(idx_r, sze_r);

}// FSN

// Приведение к строке. --------------------------------------------------------
//------------------------------------------------------------------------------
QString STR(int val) { return QString::number(val); }
QString STR(const char* val) { return QString(val); }

// Приведение к UTF-8. ---------------------------------------------------------
//------------------------------------------------------------------------------
QString U8(const char *str) { return QString::fromUtf8(str); }

// Приведение к целому. --------------------------------------------------------
//------------------------------------------------------------------------------
int INT(QString val) { return val.toInt(); }
int INT(double val) { return static_cast<int>(val); }

// Проверка на пустое значение. ------------------------------------------------
//------------------------------------------------------------------------------
QString NVL(QString val, QString dft) { return val.isEmpty() ? dft : val; }

// НЕ. -------------------------------------------------------------------------
//------------------------------------------------------------------------------
bool NOT(bool val) { return !val; }

// Значение по умолчанию. ------------------------------------------------------
//------------------------------------------------------------------------------
QString DFT(QString val, QString dft){ return val.isEmpty() ? dft : val; }

// Увеличить на еденицу. -------------------------------------------------------
//------------------------------------------------------------------------------
int INC(const int val) { return val + 1; }

// Чтение файла. ---------------------------------------------------------------
//------------------------------------------------------------------------------
QString FLE(QString fnme) {
    QFile file(fnme);
    if(file.open(QIODevice::ReadOnly | QIODevice::Text))
        { return QTextStream(&file).readAll(); }
    return EMPTY_STR;
}// FLE

//------------------------------------------------------------------------------
